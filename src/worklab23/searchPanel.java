package worklab23;

import java.sql.Connection;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.logging.Level;
import java.util.logging.Logger;

public class searchPanel extends javax.swing.JPanel {
    /*
    Film arama paneli.
    */
    
    public ArrayList<Integer> tempLibrary; //Kutuphaneye eklenecek filmlerin gecici olarak tutuldugu dizi.
    private final ArrayList<Integer> typeID; //Film türlerinin tutuldugu dizi.
    private ArrayList<Integer> indexList; //Film idlerinin tutulacagi dizi. 

    public searchPanel() {
        initComponents();
        typeID = new ArrayList<>();
        tempLibrary = new ArrayList<>();
        indexList = new ArrayList<>();
        initOthers();
    }

    private void initOthers() {
        //Tum tur adlarini cekmek icin olusturulmus fonksiyon.
        dbConnect msql = new dbConnect();
        Connection con = msql.getConnection();
        //Veritabani baglantisi.
        try {
            Statement stmt = con.createStatement();
            String sorgu = String.format("Select * from type;");
            //Tum tur adlarini ceken sorgu.
            ResultSet rs = stmt.executeQuery(sorgu);
            System.out.println("Kayıt Sorgulandi!");

            while (rs.next()) {
                typeList.addItem(rs.getString(2));
                typeID.add(rs.getInt(1)); //Cekilen tur adlarinin gorsel arayuze eklenmesi.
            }

        } catch (SQLException e) {
            System.out.println(e);
        }
        
        
        try {
            con.close();
        } catch (SQLException ex) {
            Logger.getLogger(searchPanel.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        searchText = new javax.swing.JTextField();
        searchButton = new javax.swing.JButton();
        listButton = new javax.swing.JButton();
        typeList = new javax.swing.JComboBox<>();
        jScrollPane1 = new javax.swing.JScrollPane();
        table = new javax.swing.JTable();
        watchButton = new javax.swing.JButton();

        searchButton.setText("Ara");
        searchButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                searchButtonActionPerformed(evt);
            }
        });

        listButton.setText("Listele");
        listButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                listButtonActionPerformed(evt);
            }
        });

        typeList.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                typeListActionPerformed(evt);
            }
        });

        table.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null}
            },
            new String [] {
                "Ad", "Tür"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(table);

        watchButton.setText("Kütüphaneye Ekle");
        watchButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                watchButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(searchText)
                            .addComponent(typeList, 0, 118, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(searchButton, javax.swing.GroupLayout.PREFERRED_SIZE, 68, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(listButton))
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 462, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(watchButton)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(21, 21, 21)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(searchText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(searchButton))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(listButton)
                    .addComponent(typeList, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 170, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(watchButton)
                .addGap(76, 76, 76))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void searchButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_searchButtonActionPerformed
        //girilen kelimeye gore film aramasi yapilan kisim.
        indexList.clear();
        dbConnect msql = new dbConnect();
        Connection con = msql.getConnection(); //veritabanina baglandik.
        String str = searchText.getText(); //Aranan metin bir stringe kaydedildi.
        Object dataList[][]; //verileri tabloya basmak icin tutulan dizi.
        ArrayList<Object[]> temp = new ArrayList<>(); //Cekilen verilerin gecici olarak tutuldugu ArrayList.

        try {
            Statement stmt = con.createStatement(); //Birinci sorgu degiskeni.
            Statement stmt2 = con.createStatement(); //ikinci sorgu degiskeni.
            String sorgu = String.format("select * from program where name like '%%%s%%' ", str);
            //Girilen kelimeye sahip tum filmler veritabanindan cekildi.
            ResultSet rs = stmt.executeQuery(sorgu); //Veriler resultset'e kaydedildi.
            System.out.println("Kayıt Sorgulandi!");

            while (rs.next()) {
                int programid = rs.getInt(1);
                String sorgu2 = String.format("select * from type t, programtype pt "
                        + "where t.idtype = pt.idtype and pt.idprogram='%d' ", programid);
                //Veritabanindan cekilen her filmin turunun bulundugu sorgu.
                ResultSet rs2 = stmt2.executeQuery(sorgu2);
                String programTuru = ""; //Tum tur adlarinin toplandigi string.
                while (rs2.next()) {
                    System.out.println("ekle: " + rs.getInt(1) + ":" + rs2.getString(2));
                    programTuru = programTuru + ", " + rs2.getString(2);//program turlerinin eklenmesi.
                }
                System.out.println(rs.getString(2) + ":" + programTuru);

                temp.add(new Object[]{
                    rs.getString(2), //gecici arrayliste film adinin ve program turunun eklenmesi.
                    programTuru
                });
                indexList.add(rs.getInt(1)); //Cekilen filmlerin idlerinin listeye kaydedilmesi.
            }
            dataList = new Object[temp.size()][]; //Tabloda gorunecek verilerin tutulacagi matrix.
            int l = 0;
            for (Object[] o : temp) {
                dataList[l] = o; //GEcici arraylistteki verilerin matris'e aktarilmasi.
                l++;
            }

            table.setModel(new javax.swing.table.DefaultTableModel(
                    dataList,
                    new String[]{ //Tablo baslik adlarinin verilmesi.
                        "Ad", "Tür"
                    }
            ) {
                boolean[] canEdit = new boolean[]{
                    false, false //Tablodaki veriler editlenemez.
                };

                @Override
                public boolean isCellEditable(int rowIndex, int columnIndex) {
                    return canEdit[columnIndex];
                }
            });

        } catch (SQLException e) {
            System.out.println(e);
        }

        try {
            con.close();
        } catch (SQLException ex) {
            Logger.getLogger(searchPanel.class.getName()).log(Level.SEVERE, null, ex);
        }

    }//GEN-LAST:event_searchButtonActionPerformed

    private void typeListActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_typeListActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_typeListActionPerformed

    private void listButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_listButtonActionPerformed
        indexList.clear();
        dbConnect msql = new dbConnect();
        Connection con = msql.getConnection();

        Object dataList[][];
        ArrayList<Object[]> temp = new ArrayList<>();
        try {
            int index = typeID.get(typeList.getSelectedIndex()); //Secilen turun indexinin kaydedilmesi.
            Statement stmt = con.createStatement(); //1. sorgu degiskeni.
            Statement stmt2 = con.createStatement(); //2.sorgu degiskeni.
            String sorgu = String.format("select * from program p, "
                    + " programtype  pt"
                    + " where pt.idType = '%d' and pt.idprogram = p.idprogram;", index);
            //Secilen ture ait tum filmlerin cekildigi sql sorgusu.
            ResultSet rs = stmt.executeQuery(sorgu); //1. sorgunun calistirilmasi.
            System.out.println("Kayıt Sorgulandi!");
            while (rs.next()) {
                int programid = rs.getInt(1); //Cekilen filmlerin idlerinin tek tek tutuldugu int.

                String sorgu2 = String.format("select * from type t, programtype pt "
                        + "where t.idtype = pt.idtype and pt.idprogram='%d' ", programid);
                //Cekilen herbir filmin turunun cekildigi sorgu.
                ResultSet rs2 = stmt2.executeQuery(sorgu2); //2. sorgunun calismasi.
                String programTuru = ""; //Cekilen filmin turunun tutulmasi.
                while (rs2.next()) {
                    System.out.println("ekle: " + rs.getInt(1) + ":" + rs2.getString(2));
                    programTuru = programTuru + ", " + rs2.getString(2);
                    //Film turlerinin art arda eklenmesi.
                }
                System.out.println(rs.getString(2) + ":" + programTuru);

                temp.add(new Object[]{
                    rs.getString(2), programTuru //GEcici arrayliste film adi ve turunun eklenmesi.
                });
                indexList.add(rs.getInt(1)); //Secilen filmlerin idlerinin arrayliste eklenmesi.
            }
            dataList = new Object[temp.size()][]; //Tabloda gorunecek verileri tutan matrix.
            int l = 0;
            for (Object[] o : temp) {
                dataList[l] = o;  //Gecici arraylistteki verilerin matrixe aktarilmasi.
                l++;
            }

            table.setModel(new javax.swing.table.DefaultTableModel(
                    dataList,
                    new String[]{
                        "Ad", "Tür" //tablonun olusturulmasi.
                    }
            ) {
                boolean[] canEdit = new boolean[]{
                    false, false //Tablo editlenemez.
                };

                @Override
                public boolean isCellEditable(int rowIndex, int columnIndex) {
                    return canEdit[columnIndex];
                }
            });

        } catch (SQLException e) {
            System.out.println(e);
        }

        try {
            con.close();
        } catch (SQLException ex) {
            Logger.getLogger(searchPanel.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_listButtonActionPerformed

    private void watchButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_watchButtonActionPerformed
        //Tabloda secilen film gecici kutuphanede yoksa gecici kutuphaneye eklenir.
        //Daha sonra burdaki veriler asil kutuphaneye eklenir.

        int index = indexList.get(table.getSelectedRow());
        //if (!tempLibrary.contains(index)) {
        tempLibrary.add(index);
        //}
    }//GEN-LAST:event_watchButtonActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JButton listButton;
    private javax.swing.JButton searchButton;
    private javax.swing.JTextField searchText;
    private javax.swing.JTable table;
    private javax.swing.JComboBox<String> typeList;
    private javax.swing.JButton watchButton;
    // End of variables declaration//GEN-END:variables
}

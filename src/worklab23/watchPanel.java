package worklab23;

import java.sql.Connection;
import java.sql.Date;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.logging.Level;
import java.util.logging.Logger;

/*
Film izleme ve puanlama icin olusturulmus sayfadir.
*/
public class watchPanel extends javax.swing.JPanel {
    //Film izleme paneli.
    private int userId; //giris yapan kullanicinin idsi.
    private ArrayList<Integer> tempLib; //Kutuphaneye eklenecek filmlerin gecici olarak tutuldugu arraylist.
    private ArrayList<Integer> idList;
    private String nowWatching; //izlenen filmin adini tutan degisker.
    private int selectedFilmIndex;

    public watchPanel(int id, ArrayList<Integer> lib) {
        initComponents();
        this.userId = id; //kullanici id'sinin constructordan alinmasi.
        this.tempLib = lib; //gecici kutuphanenin constructordan alinmasi.
        idList = new ArrayList<>();
        nowWatching = "";
        initOthers();
    }

    private void initOthers() {
        /*
        Kullanicinin kutuphanesindeki filmlerin ilk acilista eklendigi method.
        */
        dbConnect msql = new dbConnect(); //Veritabani baglantisi.
        Connection con = msql.getConnection();
        Object dataList[][]; //Tabloda gosterilecek verilerin tutuldgu matris.
        ArrayList<Object[]> temp = new ArrayList<>(); //verilerin gecici olarak tutuldugu arraylist.
        try {
            Statement stmt = con.createStatement();
            String sorgu = String.format("select * from userprogram up , program p "
                    + "where up.programid = p.idprogram and up.userid='%d';", userId);
            //kullanicinin daha once kutuphaneye ekledigi tum filmlerin cekildigi sorgu.
            ResultSet rs = stmt.executeQuery(sorgu); //sorgunun islenmesi.
            System.out.println("Kayit Sorgulandi!");
            while (rs.next()) { //verilerin sirayla cekildigi dongu.
                System.out.println("x: " + rs.getString(9));

                temp.add(new Object[]{
                    rs.getString(9), //AD bilgisinin alinmasi
                    rs.getString(7), //Puan bilgisinin alinmasi
                    rs.getString(6), //Bolum bilgisinin alinmasi
                    rs.getString(5) //Dakika bilgisinin alinmasi
                });
                idList.add(rs.getInt(8)); //Cekilen filmin id bilgisinin listeye eklenmesi.
            }
            dataList = new Object[temp.size()][]; //Tablodaki verileri tutacak matrisin tanimlanmasi.
            int l = 0;
            for (Object[] o : temp) {
                dataList[l] = o; //Matrisin gecici listeden doldurulmasi.
                l++;
            }

            table.setModel(new javax.swing.table.DefaultTableModel(
                    dataList, //Matrisin tabloya eklenmesi.
                    new String[]{
                        "Ad", "Puan", "Kaldığım Yer", "Kaldığım Dk"
                            //Tablonun basliklari.
                    }
            ) {
                boolean[] canEdit = new boolean[]{ //Tablonun editlenmesinin engellenmesi.
                    false, false, false, false
                };

                @Override
                public boolean isCellEditable(int rowIndex, int columnIndex) {
                    return canEdit[columnIndex];
                }
            });

        } catch (SQLException e) {
            System.out.println(e);
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        table = new javax.swing.JTable();
        libraryText = new javax.swing.JLabel();
        chooseButton = new javax.swing.JButton();
        updateButton = new javax.swing.JButton();
        filmName = new javax.swing.JLabel();
        watchButton = new javax.swing.JButton();
        minuteList = new javax.swing.JComboBox<>();
        pointText = new javax.swing.JLabel();
        pointList = new javax.swing.JComboBox<>();
        pointButton = new javax.swing.JButton();

        table.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Ad", "Puan", "Kaldığım Yer", "Kaldığım Dk"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, true
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(table);

        libraryText.setText("Kütüphanem");

        chooseButton.setText("Seç");
        chooseButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                chooseButtonActionPerformed(evt);
            }
        });

        updateButton.setText("Güncelle");
        updateButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                updateButtonActionPerformed(evt);
            }
        });

        filmName.setText("jLabel1");
        filmName.setVisible(false);

        watchButton.setText("İzle");
        watchButton.setVisible(false);
        watchButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                watchButtonActionPerformed(evt);
            }
        });

        minuteList.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "30 Dk", "60 Dk", "90 Dk", "120 Dk" }));
        minuteList.setVisible(false);

        pointText.setText("Puan:");
        pointText.setVisible(false);

        pointList.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "10", "9", "8", "7", "6", "5", "4", "3", "2", "1" }));
        pointList.setVisible(false);

        pointButton.setText("Yolla");
        pointButton.setVisible(false);
        pointButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                pointButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 461, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(updateButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(chooseButton))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(libraryText)
                            .addComponent(filmName)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(minuteList, javax.swing.GroupLayout.PREFERRED_SIZE, 66, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(watchButton))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(pointText)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(pointList, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(pointButton)))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(19, 19, 19)
                .addComponent(libraryText)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 145, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(chooseButton)
                    .addComponent(updateButton))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(filmName)
                .addGap(4, 4, 4)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(watchButton)
                    .addComponent(minuteList, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(23, 23, 23)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(pointText)
                    .addComponent(pointList, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(pointButton))
                .addContainerGap(113, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void updateButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_updateButtonActionPerformed
        // Kutuphaneye yeni eklenen filmlerin guncellendigi button.

        dbConnect msql = new dbConnect(); //Veritabani baglantisi.
        Connection con = msql.getConnection();
        Object dataList[][]; //Tabloya eklenecek verilerin tutuldugu matris.
        ArrayList<Object[]> temp = new ArrayList<>(); //Verilerin gecici olarak tutuldugu arraylis.t

        try {
            Statement stmt = con.createStatement();
            for (int i = 0; i < tempLib.size(); i++) { //gecici kutuphanedeki tum filmlerin sirayla gezilmesi.
                String sorgu = String.format("insert into userprogram (userid, programid, point,time,episode)"
                        + "values(%d, %d, 0,0,1)", userId, tempLib.get(i));
                //Gecici kutuphanedeki filmin veritabanina eklenmesini saglayan sorgu.
                if (idList.contains(tempLib.get(i))) {
                    //eger film zaten kutuphanede varsa hicbir sey yapma.
                } else {
                    //Eger film daha once eklenmediyse veritabanına ekle.
                    stmt.executeUpdate(sorgu);
                    idList.add(tempLib.get(i)); //listeye ekle.
                }

            }

        } catch (SQLException e) {
            System.out.println(e);
        }

        try { //kutuphanenin guncellenmis halinin tabloya basildigi bolum.
            Statement stmt = con.createStatement();
            String sorgu = String.format("select * from program p, userprogram up "
                    + "where up.userid = '%d' and p.idprogram = up.programid ", userId);
            //veritabaninda kullanicinin tum filmerinin cekildigi sorgu.
            ResultSet rs = stmt.executeQuery(sorgu); //sorgunun calismasi.
            System.out.println("Kayıt Sorgulandi!");
            while (rs.next()) {
                temp.add(new Object[]{ //gecici listeye film bilgilerinin girilmesi.
                    rs.getString(2), //isim
                    rs.getString(12), //Puan
                    rs.getString(11), //Bolum
                    rs.getString(10) //Dakika
                });
            }
            dataList = new Object[temp.size()][]; //Tabloda gorunecek verilerin tutuldugu matris olusturuluyor.
            int l = 0;
            for (Object[] o : temp) {
                dataList[l] = o; //Gecici listedeki veriler asil listeye aktariliyor.
                l++;
            }

            table.setModel(new javax.swing.table.DefaultTableModel(
                    dataList, //Verilerin tabloya aktarilmasi.
                    new String[]{
                        "Ad", "Puan", "Kaldığım Yer", "Kaldığım Dk"
                        //tablonun basliklari.
                    }
            ) {
                boolean[] canEdit = new boolean[]{
                    false, false, false, false
                    //tablodaki verilerin editlenmesi engellendi.
                };

                @Override
                public boolean isCellEditable(int rowIndex, int columnIndex) {
                    return canEdit[columnIndex];
                }
            });

        } catch (SQLException e) {
            System.out.println(e);
        }

        tempLib.clear(); //gecici kutuphane guncellemeden sonra silinir.
    }//GEN-LAST:event_updateButtonActionPerformed

    private void chooseButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_chooseButtonActionPerformed
        //secilen filmin acildigi bolum.
        String str = table.getModel().getValueAt(table.getSelectedRow(), 0) + " acildi.";
        //Filmin adinin basilmasi.
        filmName.setText(str); //film adi girilir.
        filmName.setVisible(true); //acilan filmin adi gosterilir.
        minuteList.setVisible(true); //Kac dakika izlenecegini gosteren liste gorunur hale gelir.
        watchButton.setVisible(true); //izleme butonu aktif hale gelir.
        selectedFilmIndex = table.getSelectedRow(); //Secilen film indexi kaydedilir.

    }//GEN-LAST:event_chooseButtonActionPerformed

    private void watchButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_watchButtonActionPerformed
        /*
        Film izleme isleminin gerceklestigi yer.
        */
        int selectedFilm = idList.get(selectedFilmIndex); //izlenecek filmin idsi cekilir.
        int time = 0; //filmin izlenme suresi
        int maxTime = 0; //film kac dakika.
        int maxChapter = 0; //film kac bolum
        int chapter = 0; //filmde kacinci bolumdeyim.
        dbConnect msql = new dbConnect(); //veritabanina baglanilir.
        Connection con = msql.getConnection();
        int timeIndex = minuteList.getSelectedIndex(); //kac dakika izlenecegi kaydedilir.
        try {

            Statement stmt = con.createStatement();
            String sorgu = String.format("Select time, length, chapterNo, episode from userprogram up, program p where p.idprogram = up.programid and up.userid = %d and up.programid = %d", userId, selectedFilm);
            //izlenecek filmin bilgileri sorgulanir.
            ResultSet rs = stmt.executeQuery(sorgu);
            while (rs.next()) {
                time = rs.getInt(1); //izlenme suresi cekilir.
                maxTime = rs.getInt(2); //film kac dakikalik.
                maxChapter = rs.getInt(3); //film kac bolum.
                chapter = rs.getInt(4); //ben kacinci bolumdeyim.
            }
            boolean nextEpisode = false; //sonraki bolume gecip gecilmeyecegini tutan degisken.

            switch (timeIndex) { //Kac dakika izlenecek?
                case 0: //30 dakika izlenme durumu.
                    if (time + 30 >= maxTime) {
                        time = maxTime;
                        nextEpisode = true;
                    } else {
                        time += 30;
                    }
                    break;
                case 1: //60 dakika izlenme durumu.
                    if (time + 60 >= maxTime) {
                        time = maxTime; //eger film suresi asilirsa sonraki bolume gecilir.
                        nextEpisode = true;
                    } else {
                        time += 60; //film suresi asilmazsa izlenme suresi arttirilir.
                    }
                    break;
                case 2: //90 dk izlenme durumu.
                    if (time + 90 >= maxTime) {
                        time = maxTime; //eger film suresi asilirsa sonraki bolume gecilir.
                        nextEpisode = true;
                    } else {
                        time += 90; //film suresi asilmazsa izlenme suresi arttirilir.
                    }
                    break;
                case 3: //120 dk izlenme durumu.
                    if (time + 120 >= maxTime) {
                        time = maxTime; //eger film suresi asilirsa sonraki bolume gecilir.
                        nextEpisode = true;
                    } else {
                        time += 120;//film suresi asilmazsa izlenme suresi arttirilir.
                    }
                    break;
                default:
                    break;
            }
            Date date = new Date(Calendar.getInstance().getTime().getTime());
            //filmin izlenme tarihi kaydedilir.
            
            System.out.println("1");
            if (nextEpisode == false) {
                /*
                Sonraki bolume gecilmezse filmin izlenme suresi
                arttirilarak guncelelme yapilir.
                */
                System.out.println("2");
                String sorgu2 = String.format("update userprogram up, program p set up.time = '%d', up.date ='%s' "
                        + "where p.idprogram = up.programid and up.userid = '%d' and up.programid = '%d';", time,date.toString(), userId, selectedFilm);
                stmt.executeUpdate(sorgu2);
            } else if (nextEpisode == true && chapter < maxChapter) {
                /*
                Sonraki bolume gecilirse ve son bolume gelinmezse 
                bir sonraki bolume gecilir ve sure 0 yapilir.
                */
                System.out.println("3");
                String sorgu2 = String.format("update userprogram up, program p set up.time = 0,  up.episode = up.episode + 1, up.date = '%s'"
                        + "where p.idprogram = up.programid and up.userid = '%d' and up.programid = '%d';",date.toString(), userId, selectedFilm, date.toString());
                stmt.executeUpdate(sorgu2);
            } else if (nextEpisode == true && chapter >= maxChapter) {
                /*
                Sonraki bolume gecilirse ve son bolume gelindiyse 
                son bolume gelindigi isaretlenir ve dakika son dakikaya esitlenir.
                */
                System.out.println("Tum bolumler izlendi.");
                String sorgu2 = String.format("update userprogram up, program p set up.time = '%d', up.date='%s' "
                        + "where p.idprogram = up.programid and up.userid = '%d' and up.programid = '%d';", time, date.toString(), userId, selectedFilm);
                stmt.executeUpdate(sorgu2);

            }

        } catch (SQLException e) {
            System.out.println(e);
            System.out.println("??");
        }

        pointText.setVisible(true); //puan verme bolumu aktif hale gelir.
        pointList.setVisible(true); //puan listesi acilir.
        pointButton.setVisible(true); //puan verme bolumu acilir.

        
        try {
            con.close();
        } catch (SQLException ex) {
            Logger.getLogger(searchPanel.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_watchButtonActionPerformed

    private void pointButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_pointButtonActionPerformed
        /*
        Puan verme kismi
        */          
        int selectedFilm = idList.get(selectedFilmIndex); //puan verilecek film idsi alinir.
        int puan = Integer.parseInt(pointList.getSelectedItem().toString()); //verilecek puan listeden alinir.
        dbConnect msql = new dbConnect(); //veritabanina baglanilir.
        Connection con = msql.getConnection();
        Statement stmt;
        try {
            stmt = con.createStatement();
            String sorgu = String.format("update userprogram up, program p set up.point ='%d' "
                    + "where p.idprogram = up.programid and up.userid = '%d' and up.programid = '%d';",puan ,userId, selectedFilm);
            stmt.executeUpdate(sorgu);
            //belirlenen filmin puani arttirilir.
        } catch (SQLException ex) {
            System.out.println(ex);
        }
        
        
        try {
            con.close();
        } catch (SQLException ex) {
            Logger.getLogger(searchPanel.class.getName()).log(Level.SEVERE, null, ex);
        }


    }//GEN-LAST:event_pointButtonActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton chooseButton;
    private javax.swing.JLabel filmName;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel libraryText;
    private javax.swing.JComboBox<String> minuteList;
    private javax.swing.JButton pointButton;
    private javax.swing.JComboBox<String> pointList;
    private javax.swing.JLabel pointText;
    private javax.swing.JTable table;
    private javax.swing.JButton updateButton;
    private javax.swing.JButton watchButton;
    // End of variables declaration//GEN-END:variables
}
